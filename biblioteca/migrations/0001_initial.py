# Generated by Django 5.2.1 on 2025-06-07 22:45

import biblioteca.models
import datetime
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            CREATE TYPE book_condition AS ENUM ('new','good','fair','poor');
            CREATE TYPE rating_scale AS ENUM ('poor','average','good','excellent');
            CREATE TYPE money AS (amount numeric(12,2), currency char(3));
            """, 
            reverse_sql="""
            DROP TYPE IF EXISTS book_condition;
            DROP TYPE IF EXISTS rating_scale;
            DROP TYPE IF EXISTS money;
            """
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('table_name', models.CharField(max_length=60)),
                ('record_id', models.CharField(max_length=50)),
                ('op', models.CharField(max_length=8)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('change_user', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True)),
                ('address', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=25, validators=[django.core.validators.RegexValidator('^\\+?[0-9\\- ]+$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('details_schema', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=80)),
                ('last_name', models.CharField(max_length=80)),
                ('birth_year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(2025)])),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
                'unique_together': {('first_name', 'last_name', 'birth_year')},
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('isbn', models.CharField(max_length=13, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^\\d{10}(\\d{3})?$')])),
                ('title', models.CharField(max_length=255)),
                ('published_year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1440), django.core.validators.MaxValueValidator(2025)])),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('condition', biblioteca.models.BookConditionField(default='good')),
                ('page_count', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('main_author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='primary_books', to='biblioteca.author')),
            ],
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.book')),
            ],
            options={
                'unique_together': {('book', 'author')},
            },
        ),
        migrations.AddField(
            model_name='book',
            name='other_authors',
            field=models.ManyToManyField(related_name='contributed_books', through='biblioteca.BookAuthor', to='biblioteca.author'),
        ),
        migrations.CreateModel(
            name='Copy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory_code', models.CharField(max_length=30, unique=True)),
                ('is_available', models.BooleanField(default=True)),
                ('acquired_at', models.DateField(default=django.utils.timezone.now)),
                ('price', biblioteca.models.MoneyField()),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='copies', to='biblioteca.book')),
            ],
            options={
                'ordering': ['inventory_code'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField()),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField()),
                ('capacity', models.PositiveIntegerField()),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.branch')),
            ],
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.book')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.genre')),
            ],
            options={
                'unique_together': {('book', 'genre')},
            },
        ),
        migrations.AddField(
            model_name='book',
            name='genres',
            field=models.ManyToManyField(through='biblioteca.BookGenre', to='biblioteca.genre'),
        ),
        migrations.CreateModel(
            name='LibraryUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('password', models.CharField(max_length=128)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Número telefónico inválido', regex='^\\+?[0-9\\-\\s]{7,20}$')])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Activo'), ('suspended', 'Suspendido')], default='active', max_length=10)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'library_users',
                'constraints': [models.CheckConstraint(condition=models.Q(('birth_date__lt', datetime.date(2025, 6, 7))), name='ck_user_birth_past'), models.UniqueConstraint(fields=('email',), name='uq_user_email')],
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.libraryuser')),
            ],
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loaned_at', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateField()),
                ('returned_at', models.DateTimeField(blank=True, null=True)),
                ('copy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='biblioteca.copy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='biblioteca.libraryuser')),
            ],
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('paid', models.BooleanField(default=False)),
                ('loan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.loan')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', biblioteca.models.MoneyField()),
                ('paid_at', models.DateTimeField(auto_now_add=True)),
                ('fine', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='biblioteca.fine')),
                ('method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='biblioteca.paymentmethod')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reserved_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('copy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='biblioteca.copy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='biblioteca.libraryuser')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', biblioteca.models.RatingScaleField(default='average')),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='biblioteca.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.libraryuser')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_upvote', models.BooleanField()),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='biblioteca.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='biblioteca.libraryuser')),
            ],
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permission_roles', to='biblioteca.permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='biblioteca.role')),
            ],
        ),
        migrations.CreateModel(
            name='Shelf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shelves', to='biblioteca.branch')),
            ],
        ),
        migrations.AddField(
            model_name='copy',
            name='shelf',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='biblioteca.shelf'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='biblioteca__title_eceb5c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventattendance',
            unique_together={('event', 'user')},
        ),
        migrations.AddConstraint(
            model_name='loan',
            constraint=models.CheckConstraint(condition=models.Q(('due_date__gt', models.F('loaned_at'))), name='ck_due_after_loan'),
        ),
        migrations.AlterUniqueTogether(
            name='reservation',
            unique_together={('copy', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('book', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewvote',
            unique_together={('review', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='rolepermission',
            unique_together={('role', 'permission')},
        ),
        migrations.AlterUniqueTogether(
            name='shelf',
            unique_together={('branch', 'code')},
        ),
    ]
