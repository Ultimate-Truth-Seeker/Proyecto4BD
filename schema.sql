BEGIN;
--
-- Raw SQL operation
--

            CREATE TYPE book_condition AS ENUM ('new','good','fair','poor');
            CREATE TYPE rating_scale AS ENUM ('poor','average','good','excellent');
            CREATE TYPE money AS (amount numeric(12,2), currency char(3));
            
--
-- Create model AuditLog
--
CREATE TABLE "biblioteca_auditlog" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "table_name" varchar(60) NOT NULL, "record_id" varchar(50) NOT NULL, "op" varchar(8) NOT NULL, "changed_at" timestamp with time zone NOT NULL, "change_user" varchar(150) NOT NULL);
--
-- Create model Branch
--
CREATE TABLE "biblioteca_branch" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(120) NOT NULL UNIQUE, "address" varchar(255) NOT NULL, "phone" varchar(25) NOT NULL, "created_at" timestamp with time zone NOT NULL);
--
-- Create model Genre
--
CREATE TABLE "biblioteca_genre" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(60) NOT NULL UNIQUE, "description" text NOT NULL);
--
-- Create model PaymentMethod
--
CREATE TABLE "biblioteca_paymentmethod" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(50) NOT NULL UNIQUE, "details_schema" jsonb NOT NULL);
--
-- Create model Permission
--
CREATE TABLE "biblioteca_permission" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "codename" varchar(100) NOT NULL UNIQUE, "description" varchar(255) NOT NULL);
--
-- Create model Role
--
CREATE TABLE "biblioteca_role" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "name" varchar(50) NOT NULL UNIQUE, "description" varchar(255) NOT NULL);
--
-- Create model Author
--
CREATE TABLE "biblioteca_author" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "first_name" varchar(80) NOT NULL, "last_name" varchar(80) NOT NULL, "birth_year" smallint NOT NULL CHECK ("birth_year" >= 0));
--
-- Create model Book
--
CREATE TABLE "biblioteca_book" ("isbn" varchar(13) NOT NULL PRIMARY KEY, "title" varchar(255) NOT NULL, "published_year" smallint NOT NULL CHECK ("published_year" >= 0), "languages" varchar(30)[] NOT NULL, "condition" book_condition NOT NULL, "page_count" integer NOT NULL CHECK ("page_count" >= 0), "created_at" timestamp with time zone NOT NULL, "main_author_id" bigint NOT NULL);
--
-- Create model BookAuthor
--
CREATE TABLE "biblioteca_bookauthor" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "author_id" bigint NOT NULL, "book_id" varchar(13) NOT NULL);
--
-- Add field other_authors to book
--
-- (no-op)
--
-- Create model Copy
--
CREATE TABLE "biblioteca_copy" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "inventory_code" varchar(30) NOT NULL UNIQUE, "is_available" boolean NOT NULL, "acquired_at" date NOT NULL, "price" money NOT NULL, "book_id" varchar(13) NOT NULL);
--
-- Create model Event
--
CREATE TABLE "biblioteca_event" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "title" varchar(120) NOT NULL, "description" text NOT NULL, "starts_at" timestamp with time zone NOT NULL, "ends_at" timestamp with time zone NOT NULL, "capacity" integer NOT NULL CHECK ("capacity" >= 0), "branch_id" bigint NOT NULL);
--
-- Create model BookGenre
--
CREATE TABLE "biblioteca_bookgenre" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "book_id" varchar(13) NOT NULL, "genre_id" bigint NOT NULL);
--
-- Add field genres to book
--
-- (no-op)
--
-- Create model LibraryUser
--
CREATE TABLE "library_users" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "username" varchar(150) NOT NULL UNIQUE, "email" varchar(254) NOT NULL UNIQUE, "first_name" varchar(30) NOT NULL, "last_name" varchar(150) NOT NULL, "password" varchar(128) NOT NULL, "phone_number" varchar(20) NULL, "birth_date" date NULL, "status" varchar(10) NOT NULL, "date_joined" timestamp with time zone NOT NULL, CONSTRAINT "ck_user_birth_past" CHECK ("birth_date" < '2025-06-07'::date), CONSTRAINT "uq_user_email" UNIQUE ("email"));
--
-- Create model EventAttendance
--
CREATE TABLE "biblioteca_eventattendance" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "attended_at" timestamp with time zone NOT NULL, "event_id" bigint NOT NULL, "user_id" bigint NOT NULL);
--
-- Create model Loan
--
CREATE TABLE "biblioteca_loan" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "loaned_at" timestamp with time zone NOT NULL, "due_date" date NOT NULL, "returned_at" timestamp with time zone NULL, "copy_id" bigint NOT NULL, "user_id" bigint NOT NULL);
--
-- Create model Fine
--
CREATE TABLE "biblioteca_fine" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "amount" numeric(8, 2) NOT NULL, "created_at" timestamp with time zone NOT NULL, "paid" boolean NOT NULL, "loan_id" bigint NOT NULL UNIQUE);
--
-- Create model Payment
--
CREATE TABLE "biblioteca_payment" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "amount" money NOT NULL, "paid_at" timestamp with time zone NOT NULL, "fine_id" bigint NOT NULL, "method_id" bigint NOT NULL);
--
-- Create model Reservation
--
CREATE TABLE "biblioteca_reservation" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "reserved_at" timestamp with time zone NOT NULL, "expires_at" timestamp with time zone NOT NULL, "copy_id" bigint NOT NULL, "user_id" bigint NOT NULL);
--
-- Create model Review
--
CREATE TABLE "biblioteca_review" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "rating" rating_scale NOT NULL, "comment" text NOT NULL, "created_at" timestamp with time zone NOT NULL, "book_id" varchar(13) NOT NULL, "user_id" bigint NOT NULL);
--
-- Create model ReviewVote
--
CREATE TABLE "biblioteca_reviewvote" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "is_upvote" boolean NOT NULL, "review_id" bigint NOT NULL, "user_id" bigint NOT NULL);
--
-- Create model RolePermission
--
CREATE TABLE "biblioteca_rolepermission" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "permission_id" bigint NOT NULL, "role_id" bigint NOT NULL);
--
-- Create model Shelf
--
CREATE TABLE "biblioteca_shelf" ("id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "code" varchar(20) NOT NULL, "description" varchar(255) NOT NULL, "branch_id" bigint NOT NULL);
--
-- Add field shelf to copy
--
ALTER TABLE "biblioteca_copy" ADD COLUMN "shelf_id" bigint NULL CONSTRAINT "biblioteca_copy_shelf_id_159c798e_fk_biblioteca_shelf_id" REFERENCES "biblioteca_shelf"("id") DEFERRABLE INITIALLY DEFERRED; SET CONSTRAINTS "biblioteca_copy_shelf_id_159c798e_fk_biblioteca_shelf_id" IMMEDIATE;
--
-- Create index biblioteca__title_eceb5c_idx on field(s) title of model book
--
CREATE INDEX "biblioteca__title_eceb5c_idx" ON "biblioteca_book" ("title");
--
-- Alter unique_together for eventattendance (1 constraint(s))
--
ALTER TABLE "biblioteca_eventattendance" ADD CONSTRAINT "biblioteca_eventattendance_event_id_user_id_42b2e7c4_uniq" UNIQUE ("event_id", "user_id");
--
-- Create constraint ck_due_after_loan on model loan
--
ALTER TABLE "biblioteca_loan" ADD CONSTRAINT "ck_due_after_loan" CHECK ("due_date" > ("loaned_at"));
--
-- Alter unique_together for reservation (1 constraint(s))
--
ALTER TABLE "biblioteca_reservation" ADD CONSTRAINT "biblioteca_reservation_copy_id_user_id_49b2f749_uniq" UNIQUE ("copy_id", "user_id");
--
-- Alter unique_together for review (1 constraint(s))
--
ALTER TABLE "biblioteca_review" ADD CONSTRAINT "biblioteca_review_book_id_user_id_f6452437_uniq" UNIQUE ("book_id", "user_id");
--
-- Alter unique_together for reviewvote (1 constraint(s))
--
ALTER TABLE "biblioteca_reviewvote" ADD CONSTRAINT "biblioteca_reviewvote_review_id_user_id_5d0805f3_uniq" UNIQUE ("review_id", "user_id");
--
-- Alter unique_together for rolepermission (1 constraint(s))
--
ALTER TABLE "biblioteca_rolepermission" ADD CONSTRAINT "biblioteca_rolepermission_role_id_permission_id_8b750520_uniq" UNIQUE ("role_id", "permission_id");
--
-- Alter unique_together for shelf (1 constraint(s))
--
ALTER TABLE "biblioteca_shelf" ADD CONSTRAINT "biblioteca_shelf_branch_id_code_d7e52d47_uniq" UNIQUE ("branch_id", "code");
CREATE INDEX "biblioteca_branch_name_636c0ce5_like" ON "biblioteca_branch" ("name" varchar_pattern_ops);
CREATE INDEX "biblioteca_genre_name_36934909_like" ON "biblioteca_genre" ("name" varchar_pattern_ops);
CREATE INDEX "biblioteca_paymentmethod_name_91895732_like" ON "biblioteca_paymentmethod" ("name" varchar_pattern_ops);
CREATE INDEX "biblioteca_permission_codename_495cf556_like" ON "biblioteca_permission" ("codename" varchar_pattern_ops);
CREATE INDEX "biblioteca_role_name_b5852e6f_like" ON "biblioteca_role" ("name" varchar_pattern_ops);
ALTER TABLE "biblioteca_author" ADD CONSTRAINT "biblioteca_author_first_name_last_name_birth_year_9d800860_uniq" UNIQUE ("first_name", "last_name", "birth_year");
ALTER TABLE "biblioteca_book" ADD CONSTRAINT "biblioteca_book_main_author_id_57a14fb8_fk_biblioteca_author_id" FOREIGN KEY ("main_author_id") REFERENCES "biblioteca_author" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_book_isbn_18c8878d_like" ON "biblioteca_book" ("isbn" varchar_pattern_ops);
CREATE INDEX "biblioteca_book_main_author_id_57a14fb8" ON "biblioteca_book" ("main_author_id");
ALTER TABLE "biblioteca_bookauthor" ADD CONSTRAINT "biblioteca_bookauthor_book_id_author_id_53ae7a17_uniq" UNIQUE ("book_id", "author_id");
ALTER TABLE "biblioteca_bookauthor" ADD CONSTRAINT "biblioteca_bookautho_author_id_9500a8f0_fk_bibliotec" FOREIGN KEY ("author_id") REFERENCES "biblioteca_author" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_bookauthor" ADD CONSTRAINT "biblioteca_bookauthor_book_id_39fbfcd0_fk_biblioteca_book_isbn" FOREIGN KEY ("book_id") REFERENCES "biblioteca_book" ("isbn") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_bookauthor_author_id_9500a8f0" ON "biblioteca_bookauthor" ("author_id");
CREATE INDEX "biblioteca_bookauthor_book_id_39fbfcd0" ON "biblioteca_bookauthor" ("book_id");
CREATE INDEX "biblioteca_bookauthor_book_id_39fbfcd0_like" ON "biblioteca_bookauthor" ("book_id" varchar_pattern_ops);
ALTER TABLE "biblioteca_copy" ADD CONSTRAINT "biblioteca_copy_book_id_5ab4c89d_fk_biblioteca_book_isbn" FOREIGN KEY ("book_id") REFERENCES "biblioteca_book" ("isbn") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_copy_inventory_code_27b681e6_like" ON "biblioteca_copy" ("inventory_code" varchar_pattern_ops);
CREATE INDEX "biblioteca_copy_book_id_5ab4c89d" ON "biblioteca_copy" ("book_id");
CREATE INDEX "biblioteca_copy_book_id_5ab4c89d_like" ON "biblioteca_copy" ("book_id" varchar_pattern_ops);
ALTER TABLE "biblioteca_event" ADD CONSTRAINT "biblioteca_event_branch_id_c89e5c96_fk_biblioteca_branch_id" FOREIGN KEY ("branch_id") REFERENCES "biblioteca_branch" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_event_branch_id_c89e5c96" ON "biblioteca_event" ("branch_id");
ALTER TABLE "biblioteca_bookgenre" ADD CONSTRAINT "biblioteca_bookgenre_book_id_genre_id_e679f4e6_uniq" UNIQUE ("book_id", "genre_id");
ALTER TABLE "biblioteca_bookgenre" ADD CONSTRAINT "biblioteca_bookgenre_book_id_e059e95c_fk_biblioteca_book_isbn" FOREIGN KEY ("book_id") REFERENCES "biblioteca_book" ("isbn") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_bookgenre" ADD CONSTRAINT "biblioteca_bookgenre_genre_id_164ebe9b_fk_biblioteca_genre_id" FOREIGN KEY ("genre_id") REFERENCES "biblioteca_genre" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_bookgenre_book_id_e059e95c" ON "biblioteca_bookgenre" ("book_id");
CREATE INDEX "biblioteca_bookgenre_book_id_e059e95c_like" ON "biblioteca_bookgenre" ("book_id" varchar_pattern_ops);
CREATE INDEX "biblioteca_bookgenre_genre_id_164ebe9b" ON "biblioteca_bookgenre" ("genre_id");
CREATE INDEX "library_users_username_b68013ed_like" ON "library_users" ("username" varchar_pattern_ops);
CREATE INDEX "library_users_email_d05b4cee_like" ON "library_users" ("email" varchar_pattern_ops);
ALTER TABLE "biblioteca_eventattendance" ADD CONSTRAINT "biblioteca_eventatte_event_id_d6633d44_fk_bibliotec" FOREIGN KEY ("event_id") REFERENCES "biblioteca_event" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_eventattendance" ADD CONSTRAINT "biblioteca_eventattendance_user_id_5b970190_fk_library_users_id" FOREIGN KEY ("user_id") REFERENCES "library_users" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_eventattendance_event_id_d6633d44" ON "biblioteca_eventattendance" ("event_id");
CREATE INDEX "biblioteca_eventattendance_user_id_5b970190" ON "biblioteca_eventattendance" ("user_id");
ALTER TABLE "biblioteca_loan" ADD CONSTRAINT "biblioteca_loan_copy_id_e570a473_fk_biblioteca_copy_id" FOREIGN KEY ("copy_id") REFERENCES "biblioteca_copy" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_loan" ADD CONSTRAINT "biblioteca_loan_user_id_4297a7d6_fk_library_users_id" FOREIGN KEY ("user_id") REFERENCES "library_users" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_loan_copy_id_e570a473" ON "biblioteca_loan" ("copy_id");
CREATE INDEX "biblioteca_loan_user_id_4297a7d6" ON "biblioteca_loan" ("user_id");
ALTER TABLE "biblioteca_fine" ADD CONSTRAINT "biblioteca_fine_loan_id_424d391f_fk_biblioteca_loan_id" FOREIGN KEY ("loan_id") REFERENCES "biblioteca_loan" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_payment" ADD CONSTRAINT "biblioteca_payment_fine_id_ceb4cc54_fk_biblioteca_fine_id" FOREIGN KEY ("fine_id") REFERENCES "biblioteca_fine" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_payment" ADD CONSTRAINT "biblioteca_payment_method_id_71df293b_fk_bibliotec" FOREIGN KEY ("method_id") REFERENCES "biblioteca_paymentmethod" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_payment_fine_id_ceb4cc54" ON "biblioteca_payment" ("fine_id");
CREATE INDEX "biblioteca_payment_method_id_71df293b" ON "biblioteca_payment" ("method_id");
ALTER TABLE "biblioteca_reservation" ADD CONSTRAINT "biblioteca_reservation_copy_id_49bf1a82_fk_biblioteca_copy_id" FOREIGN KEY ("copy_id") REFERENCES "biblioteca_copy" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_reservation" ADD CONSTRAINT "biblioteca_reservation_user_id_1618b384_fk_library_users_id" FOREIGN KEY ("user_id") REFERENCES "library_users" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_reservation_copy_id_49bf1a82" ON "biblioteca_reservation" ("copy_id");
CREATE INDEX "biblioteca_reservation_user_id_1618b384" ON "biblioteca_reservation" ("user_id");
ALTER TABLE "biblioteca_review" ADD CONSTRAINT "biblioteca_review_book_id_20008d7e_fk_biblioteca_book_isbn" FOREIGN KEY ("book_id") REFERENCES "biblioteca_book" ("isbn") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_review" ADD CONSTRAINT "biblioteca_review_user_id_ee537aed_fk_library_users_id" FOREIGN KEY ("user_id") REFERENCES "library_users" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_review_book_id_20008d7e" ON "biblioteca_review" ("book_id");
CREATE INDEX "biblioteca_review_book_id_20008d7e_like" ON "biblioteca_review" ("book_id" varchar_pattern_ops);
CREATE INDEX "biblioteca_review_user_id_ee537aed" ON "biblioteca_review" ("user_id");
ALTER TABLE "biblioteca_reviewvote" ADD CONSTRAINT "biblioteca_reviewvot_review_id_c01509a1_fk_bibliotec" FOREIGN KEY ("review_id") REFERENCES "biblioteca_review" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_reviewvote" ADD CONSTRAINT "biblioteca_reviewvote_user_id_9689683c_fk_library_users_id" FOREIGN KEY ("user_id") REFERENCES "library_users" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_reviewvote_review_id_c01509a1" ON "biblioteca_reviewvote" ("review_id");
CREATE INDEX "biblioteca_reviewvote_user_id_9689683c" ON "biblioteca_reviewvote" ("user_id");
ALTER TABLE "biblioteca_rolepermission" ADD CONSTRAINT "biblioteca_rolepermi_permission_id_06fdb51e_fk_bibliotec" FOREIGN KEY ("permission_id") REFERENCES "biblioteca_permission" ("id") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "biblioteca_rolepermission" ADD CONSTRAINT "biblioteca_rolepermi_role_id_0a5f6f7a_fk_bibliotec" FOREIGN KEY ("role_id") REFERENCES "biblioteca_role" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_rolepermission_permission_id_06fdb51e" ON "biblioteca_rolepermission" ("permission_id");
CREATE INDEX "biblioteca_rolepermission_role_id_0a5f6f7a" ON "biblioteca_rolepermission" ("role_id");
ALTER TABLE "biblioteca_shelf" ADD CONSTRAINT "biblioteca_shelf_branch_id_a12ab937_fk_biblioteca_branch_id" FOREIGN KEY ("branch_id") REFERENCES "biblioteca_branch" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "biblioteca_shelf_branch_id_a12ab937" ON "biblioteca_shelf" ("branch_id");
CREATE INDEX "biblioteca_copy_shelf_id_159c798e" ON "biblioteca_copy" ("shelf_id");
COMMIT;
BEGIN;
--
-- Raw SQL operation
--

            -- Funciones auxiliares
            CREATE OR REPLACE FUNCTION calc_overdue_fine(p_loan biblioteca_loan)
            RETURNS numeric AS $$
            DECLARE
            overdue_days integer := GREATEST((CURRENT_DATE - p_loan.due_date), 0);
            BEGIN
            RETURN overdue_days * 0.50;
            END;
            $$ LANGUAGE plpgsql IMMUTABLE;

            CREATE OR REPLACE FUNCTION copy_available_count(p_book_id VARCHAR)
            RETURNS INT AS $$
                SELECT COUNT(*) FROM biblioteca_copy c
                WHERE c.book_id = p_book_id AND c.is_available;
            $$ LANGUAGE sql STABLE;

            -- Trigger: actualizar disponibilidad en loans
            CREATE OR REPLACE FUNCTION trg_update_copy_available() RETURNS trigger AS $$
            BEGIN
                IF TG_OP = 'INSERT' THEN
                    UPDATE biblioteca_copy SET is_available = FALSE WHERE id = NEW.copy_id;
                ELSIF TG_OP = 'UPDATE' AND NEW.returned_at IS NOT NULL THEN
                    UPDATE biblioteca_copy SET is_available = TRUE WHERE id = NEW.copy_id;
                END IF;
                RETURN NEW;
            END;$$ LANGUAGE plpgsql;

            CREATE TRIGGER trg_loan_copy
            AFTER INSERT OR UPDATE ON biblioteca_loan
            FOR EACH ROW EXECUTE FUNCTION trg_update_copy_available();

            -- Trigger: generar multa tras devolución
            CREATE OR REPLACE FUNCTION trg_generate_fine() RETURNS trigger AS $$
            BEGIN
                IF EXISTS (SELECT 1 FROM biblioteca_fine WHERE loan_id = NEW.id) 
                THEN RETURN NEW;
                END IF;
                IF NEW.returned_at IS NOT NULL AND NEW.returned_at::date > NEW.due_date THEN
                    INSERT INTO biblioteca_fine(loan_id, amount, created_at, paid)
                    VALUES(NEW.id, calc_overdue_fine(NEW), NOW(), FALSE);
                END IF;
                RETURN NEW;
            END;$$ LANGUAGE plpgsql;

            CREATE TRIGGER trg_fine_after_return
            AFTER UPDATE OF returned_at ON biblioteca_loan
            FOR EACH ROW WHEN (OLD.returned_at IS NULL AND NEW.returned_at IS NOT NULL)
            EXECUTE FUNCTION trg_generate_fine();

            -- Trigger: auditoría de libros
            CREATE OR REPLACE FUNCTION trg_book_audit() RETURNS trigger AS $$
            BEGIN
                INSERT INTO biblioteca_auditlog(table_name, record_id, op, changed_at, change_user)
                VALUES('books', COALESCE(NEW.isbn, OLD.isbn), TG_OP, NOW(), current_user);
                RETURN NEW;
            END;$$ LANGUAGE plpgsql;

            CREATE TRIGGER trg_books_audit
            AFTER INSERT OR UPDATE OR DELETE ON biblioteca_book
            FOR EACH ROW EXECUTE FUNCTION trg_book_audit();
            
COMMIT;
BEGIN;
--
-- Raw SQL operation
--

CREATE OR REPLACE VIEW vista_catalogo_libros AS
                SELECT 
                    b.isbn,
                    b.title,
                    CONCAT(a.first_name, ' ', a.last_name) as autor_principal,
                    b.published_year,
                    b.condition,
                    b.page_count,
                    STRING_AGG(DISTINCT g.name, ', ') as generos,
                    STRING_AGG(DISTINCT CONCAT(oa.first_name, ' ', oa.last_name), ', ') as otros_autores,
                    COUNT(DISTINCT c.id) as total_copias,
                    COUNT(DISTINCT CASE WHEN c.is_available = true THEN c.id END) as copias_disponibles,
                    COUNT(DISTINCT r.id) as total_reviews,
                    ROUND(AVG(
                        CASE r.rating 
                            WHEN 'poor' THEN 1
                            WHEN 'average' THEN 2
                            WHEN 'good' THEN 3
                            WHEN 'excellent' THEN 4
                        END
                    ), 2) as rating_promedio,
                    b.created_at,
                    CASE 
                        WHEN COUNT(DISTINCT CASE WHEN c.is_available = true THEN c.id END) > 0 
                        THEN 'Disponible'
                        ELSE 'No disponible'
                    END as estado_disponibilidad
                FROM biblioteca_book b
                LEFT JOIN biblioteca_author a ON b.main_author_id = a.id
                LEFT JOIN biblioteca_bookauthor ba ON b.isbn = ba.book_id
                LEFT JOIN biblioteca_author oa ON ba.author_id = oa.id AND oa.id != b.main_author_id
                LEFT JOIN biblioteca_bookgenre bg ON b.isbn = bg.book_id
                LEFT JOIN biblioteca_genre g ON bg.genre_id = g.id
                LEFT JOIN biblioteca_copy c ON b.isbn = c.book_id
                LEFT JOIN biblioteca_review r ON b.isbn = r.book_id
                GROUP BY 
                    b.isbn, b.title, a.first_name, a.last_name, 
                    b.published_year, b.condition, b.page_count, b.created_at
                ORDER BY b.title;
            
--
-- Raw SQL operation
--

CREATE OR REPLACE VIEW vista_prestamos_usuarios AS
                SELECT 
                    u.id as usuario_id,
                    u.username,
                    CONCAT(u.first_name, ' ', u.last_name) as nombre_completo,
                    u.email,
                    u.status as estado_usuario,
                    COUNT(DISTINCT l.id) as total_prestamos,
                    COUNT(DISTINCT CASE WHEN l.returned_at IS NULL THEN l.id END) as prestamos_activos,
                    COUNT(DISTINCT CASE WHEN l.returned_at IS NOT NULL THEN l.id END) as prestamos_devueltos,
                    COUNT(DISTINCT CASE WHEN l.returned_at IS NULL AND l.due_date < CURRENT_DATE THEN l.id END) as prestamos_vencidos,
                    COUNT(DISTINCT f.id) as total_multas,
                    COUNT(DISTINCT CASE WHEN f.paid = false THEN f.id END) as multas_pendientes,
                    COALESCE(SUM(CASE WHEN f.paid = false THEN f.amount ELSE 0 END), 0) as monto_multas_pendientes,
                    COUNT(DISTINCT r.id) as total_reservas,
                    COUNT(DISTINCT CASE WHEN r.expires_at > CURRENT_TIMESTAMP THEN r.id END) as reservas_activas,
                    COUNT(DISTINCT rev.id) as total_reviews,
                    u.date_joined,
                    CASE 
                        WHEN COUNT(DISTINCT CASE WHEN l.returned_at IS NULL AND l.due_date < CURRENT_DATE THEN l.id END) > 0 
                        THEN 'Con retrasos'
                        WHEN COUNT(DISTINCT CASE WHEN f.paid = false THEN f.id END) > 0 
                        THEN 'Con multas'
                        WHEN COUNT(DISTINCT CASE WHEN l.returned_at IS NULL THEN l.id END) > 0 
                        THEN 'Con préstamos'
                        ELSE 'Sin actividad'
                    END as estado_prestamos
                FROM library_users u
                LEFT JOIN biblioteca_loan l ON u.id = l.user_id
                LEFT JOIN biblioteca_fine f ON l.id = f.loan_id
                LEFT JOIN biblioteca_reservation r ON u.id = r.user_id
                LEFT JOIN biblioteca_review rev ON u.id = rev.user_id
                WHERE u.status = 'active'
                GROUP BY 
                    u.id, u.username, u.first_name, u.last_name, 
                    u.email, u.status, u.date_joined
                ORDER BY u.username;
            
--
-- Raw SQL operation
--

CREATE OR REPLACE VIEW vista_actividad_sucursales AS
                SELECT 
                    br.id as sucursal_id,
                    br.name as nombre_sucursal,
                    br.address,
                    br.phone,
                    COUNT(DISTINCT s.id) as total_estantes,
                    COUNT(DISTINCT c.id) as total_copias,
                    COUNT(DISTINCT CASE WHEN c.is_available = true THEN c.id END) as copias_disponibles,
                    COUNT(DISTINCT CASE WHEN c.is_available = false THEN c.id END) as copias_prestadas,
                    COUNT(DISTINCT l.id) as total_prestamos_historicos,
                    COUNT(DISTINCT CASE WHEN l.returned_at IS NULL THEN l.id END) as prestamos_activos,
                    COUNT(DISTINCT CASE WHEN l.returned_at IS NULL AND l.due_date < CURRENT_DATE THEN l.id END) as prestamos_vencidos,
                    COUNT(DISTINCT e.id) as total_eventos,
                    COUNT(DISTINCT CASE WHEN e.ends_at > CURRENT_TIMESTAMP THEN e.id END) as eventos_futuros,
                    COUNT(DISTINCT ea.id) as total_asistencias_eventos,
                    ROUND(
                        CASE 
                            WHEN COUNT(DISTINCT c.id) > 0 
                            THEN (COUNT(DISTINCT CASE WHEN c.is_available = false THEN c.id END) * 100.0 / COUNT(DISTINCT c.id))
                            ELSE 0 
                        END, 2
                    ) as porcentaje_ocupacion,
                    ROUND(
                        CASE 
                            WHEN COUNT(DISTINCT e.id) > 0 
                            THEN (COUNT(DISTINCT ea.id) * 1.0 / COUNT(DISTINCT e.id))
                            ELSE 0 
                        END, 2
                    ) as promedio_asistencia_eventos,
                    br.created_at,
                    CASE 
                        WHEN COUNT(DISTINCT CASE WHEN c.is_available = false THEN c.id END) * 100.0 / NULLIF(COUNT(DISTINCT c.id), 0) >= 80 
                        THEN 'Alta ocupación'
                        WHEN COUNT(DISTINCT CASE WHEN c.is_available = false THEN c.id END) * 100.0 / NULLIF(COUNT(DISTINCT c.id), 0) >= 50 
                        THEN 'Ocupación media'
                        WHEN COUNT(DISTINCT c.id) > 0 
                        THEN 'Baja ocupación'
                        ELSE 'Sin actividad'
                    END as nivel_actividad
                FROM biblioteca_branch br
                LEFT JOIN biblioteca_shelf s ON br.id = s.branch_id
                LEFT JOIN biblioteca_copy c ON s.id = c.shelf_id
                LEFT JOIN biblioteca_loan l ON c.id = l.copy_id
                LEFT JOIN biblioteca_event e ON br.id = e.branch_id
                LEFT JOIN biblioteca_eventattendance ea ON e.id = ea.event_id
                GROUP BY 
                    br.id, br.name, br.address, br.phone, br.created_at
                ORDER BY br.name;
            
COMMIT;
